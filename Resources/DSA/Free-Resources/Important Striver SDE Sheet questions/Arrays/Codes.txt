1. Kadane's algorithm

class Solution:
    def maxSubArray(self, nums: List[int]) -> int:
        if len(nums)==1:
            return nums[0]
        maxsum=-float("inf")
        sum=0
        for i in range(len(nums)):
            sum+=nums[i]
            maxsum=max(sum,maxsum)
            if sum<0:
                sum=0
        return maxsum

2. Sort an array of 0's, 1's and 2's

class Solution:
    def sortColors(self, nums: List[int]) -> None:
        n=len(nums)
        low=0
        mid=0
        high=n-1
        while mid<=high:
            if nums[mid]==0:
                nums[mid],nums[low]=nums[low],nums[mid]
                #print(nums)
                mid+=1
                low+=1
            elif nums[mid]==1:
                mid+=1
            elif nums[mid]==2:
                nums[mid],nums[high]=nums[high],nums[mid]
                #print(nums)
                high-=1
				
3. Stock Buy and Sell

class Solution:
    def maxProfit(self, prices: List[int]) -> int:
        minPrice=float('inf')
        maxProf=0
        for i in range(len(prices)):
            minPrice=min(minPrice,prices[i])
            maxProf=max(maxProf,prices[i]-minPrice)
        return maxProf
        
4. Merge Overlapping Subintervals

class Solution:
    def merge(self, intervals: List[List[int]]) -> List[List[int]]:
        intervals.sort()
        res=[]
        n=len(intervals)
        i=0
        while i<n:
            j=i+1
            while j<n and intervals[i][1]>=intervals[j][0]:
                intervals[i][1]=max(intervals[j][1],intervals[i][1])
                j+=1
            res.append(intervals[i])
            i=j
        return res
		
5. Merge two sorted arrays without extra space

class Solution:
    def merge(self, nums1: List[int], m: int, nums2: List[int], n: int) -> None:
        if m==0 or n==0:
            nums1[:]=nums1[:m]
        else:
            j=0
            for i in range(m):
                if j>=n:
                    break
                if nums1[i]>nums2[j]:
                    nums1[i],nums2[j]=nums2[j],nums1[i]
                    j+=1
            nums1[:]=nums1[:m]
        nums1.sort()
        nums2.sort()
        nums1=nums1.extend(nums2)
		
6. Search in a 2 D matrix

class Solution:
    def searchMatrix(self, matrix: List[List[int]], target: int) -> bool:
        m=len(matrix)
        n=len(matrix[0])
        row=[]
        for i in range(m):
            for j in range(n):
                row.append(matrix[i][j])
        beg=0
        end=(m*n)-1
        pos=-1
        while beg<=end:
            mid=(beg+end)//2
            print(row[mid])
            if target==row[mid]:
                pos=mid
                break
            elif target<row[mid]:
                end=mid-1
            else:
                beg=mid+1
        return False if pos==-1 else True

7. Grid Unique Paths

class Solution:
    def uniquePaths(self, m: int, n: int) -> int:
        m1=m-1
        n1=n-1
        N=m1+n1
        R=min(m1,n1)
        print('n=',N,' r=',R)
        mat=[]
        for i in range(N+1):
            temp=[]
            for j in range(R+1):
                #print('i=',i,'j=',j)
                if j>i:
                    temp.append(0)
                elif j==0 or j==i:
                    temp.append(1)
                elif j!=0 and j<i:
                    temp.append(mat[i-1][j]+mat[i-1][j-1])
            #print(temp)
            mat.append(temp)
            
        return mat[N][R]

8. Reverse Pairs

class Solution:
    def reversePairs(self, nums: List[int]) -> int:
        def mergesort(A,l,r):
            cnt=0
            if l<r:
                m=(l+r)//2
                cnt+=mergesort(A,l,m)
                cnt+=mergesort(A,m+1,r)
                cnt+=countPairs(A,l,m,r)
                #print("Count=",cnt)
                merge(A,l,m,r)
            return cnt
        
        def merge(A,l,m,r):
            ln=m-l+1
            rn=r-m
            la=A[l:m+1]
            ra=A[m+1:r+1]
            #print("Left Array=",la,' Right Array=',ra)
            i=0
            j=0
            k=l
            while i<ln and j<rn:
                if la[i]<=ra[j]:
                    A[k]=la[i]
                    k+=1
                    i+=1
                else:
                    A[k]=ra[j]
                    k+=1
                    j+=1
            
            while i<ln:
                A[k]=la[i]
                k+=1
                i+=1

            while j<rn:
                A[k]=ra[j]
                k+=1
                j+=1
        
        def countPairs(A, l, m, r):
            count = 0
            j = m + 1  
            for i in range(l, m + 1):  
                #j = m + 1  
                while j <= r and A[i] > 2 * A[j]:
                    #print(A[i]," ",A[j])  
                    j += 1
                count += (j - (m + 1)) 
            return count
        
        return mergesort(nums, 0, len(nums)-1)
                
9. 4-Sum Problem

import itertools as it
class Solution:
    def fourSum(self, nums: List[int], target: int) -> List[List[int]]:
        nums.sort()
        result=[]
        n=len(nums)
        for i in range(n):
            if i>0 and nums[i]==nums[i-1]:
                continue
            for j in range(i+1,n):
                if j>i+1 and nums[j]==nums[j-1]:
                    continue
                l=j+1
                r=n-1
                while l<r:
                    sum=nums[i]+nums[j]+nums[l]+nums[r]
                    if sum==target:
                        result.append([nums[i],nums[j],nums[l],nums[r]])
                        l+=1
                        r-=1
                        while l<r and nums[l]==nums[l-1]:
                            l+=1
                        while l<r and nums[r]==nums[r+1]:
                            r-=1
                    elif sum<target:
                        l+=1
                    else:
                        r-=1
        return result
		
10. Longest Consecutive Sequence

class Solution:
    def longestConsecutive(self, nums: List[int]) -> int:
        n=len(nums)
        if n==0:
            return 0
        st=set(nums)
        longest=1
        for i in st:
            if i-1 not in st:
                cnt=1
                j=i
                while j+1 in st:
                    cnt+=1
                    j+=1
                longest=max(longest,cnt)
        return longest
		
11. 3 sum

class Solution:
    def threeSum(self, nums: List[int]) -> List[List[int]]:
        nums.sort()
        n=len(nums)
        #print(nums)
        anslist=[]
        #print(nums)
        for i in range(n-2):
            if i!=0 and nums[i]==nums[i-1]:
                continue
            j=i+1
            k=n-1
            while j<k:
                s=nums[i]+nums[j]+nums[k]
                if s==0:
                    anslist.append([nums[i],nums[j],nums[k]])
                    j+=1
                    k-=1
                    while j<k and nums[j]==nums[j-1]:
                        j+=1
                    while j<k and nums[k]==nums[k+1]:
                        k-=1
                elif s>0:
                    k-=1
                else:
                    j+=1
        return anslist
                
12. Remove Duplicate from Sorted array

class Solution:
    def removeDuplicates(self, nums: List[int]) -> int:
        i=0
        n=len(nums)
        for j in range(1,n):
            if nums[i]!=nums[j]:
                i+=1
            nums[i]=nums[j]
        return i+1
		
13. Max consecutive ones

class Solution:
    def findMaxConsecutiveOnes(self, nums: List[int]) -> int:
        i=0
        n=len(nums)
        maxi=0
        while i<n:
            if nums[i]==1:
                c=0
                while i<n and nums[i]==1:
                    c+=1
                    i+=1
                maxi=max(maxi,c)
            i+=1
        return maxi
		
14. Largest Subarray with K sum

class Solution:
    def findMaxConsecutiveOnes(self, nums: List[int]) -> int:
        i=0
        n=len(nums)
        maxi=0
        while i<n:
            if nums[i]==1:
                c=0
                while i<n and nums[i]==1:
                    c+=1
                    i+=1
                maxi=max(maxi,c)
            i+=1
        return maxi
		
15. Count number of subarrays with given xor K

class Solution:
    def subarrayXor(self, arr, k):
        nsub=0
        n=len(arr)
        xr=0
        hash={}
        hash[xr]=1
        for i in range(n):
            xr^=arr[i]
            x=xr^k
            if x in hash:
                nsub+=hash[x]
            if xr in hash:
                hash[xr]+=1
            else:
                hash[xr]=1
            
        return nsub
